basePath: /api/v1
definitions:
  common.APIHostLogsResponse:
    properties:
      hostname:
        example: server1
        type: string
      logs:
        items:
          $ref: '#/definitions/common.APILogEntry'
        type: array
      pagination:
        $ref: '#/definitions/common.APILogPagination'
    type: object
  common.APILogEntry:
    properties:
      component:
        example: system
        type: string
      created_at:
        example: "2023-01-01T12:00:01Z"
        type: string
      host_name:
        example: server1
        type: string
      id:
        example: 1
        type: integer
      level:
        example: info
        type: string
      message:
        example: System started successfully
        type: string
      metadata:
        example: '{"version":"1.2.3"}'
        type: string
      timestamp:
        example: "2023-01-01T12:00:00Z"
        type: string
      type:
        example: monokit
        type: string
      updated_at:
        example: "2023-01-01T12:00:01Z"
        type: string
    type: object
  common.APILogPagination:
    properties:
      page:
        example: 1
        type: integer
      page_size:
        example: 100
        type: integer
      pages:
        example: 2
        type: integer
      total:
        example: 150
        type: integer
    type: object
  common.APILogRequest:
    properties:
      component:
        example: system
        type: string
      level:
        enum:
        - info
        - warning
        - error
        - critical
        example: info
        type: string
      message:
        example: System started successfully
        type: string
      metadata:
        example: '{"version":"1.2.3"}'
        type: string
      timestamp:
        example: "2023-01-01T12:00:00Z"
        type: string
      type:
        example: monokit
        type: string
    required:
    - component
    - level
    - message
    type: object
  common.APILogSearchRequest:
    properties:
      component:
        example: database
        type: string
      end_time:
        example: "2023-01-31T23:59:59Z"
        type: string
      host_name:
        example: server1
        type: string
      level:
        example: error
        type: string
      message_text:
        example: connection
        type: string
      page:
        example: 1
        type: integer
      page_size:
        example: 100
        type: integer
      start_time:
        example: "2023-01-01T00:00:00Z"
        type: string
      type:
        example: monokit
        type: string
    type: object
  common.APILogsResponse:
    properties:
      logs:
        items:
          $ref: '#/definitions/common.APILogEntry'
        type: array
      pagination:
        $ref: '#/definitions/common.APILogPagination'
    type: object
  common.CreateGroupRequest:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  common.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  common.Group:
    properties:
      hosts:
        items:
          $ref: '#/definitions/github_com_monobilisim_monokit_common_api.Host'
        type: array
      id:
        type: integer
      name:
        type: string
      users:
        items:
          $ref: '#/definitions/common.User'
        type: array
    type: object
  common.RegisterRequest:
    properties:
      email:
        type: string
      groups:
        type: string
      inventory:
        type: string
      password:
        type: string
      role:
        type: string
      username:
        type: string
    required:
    - email
    - password
    - role
    - username
    type: object
  common.UpdateMeRequest:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  common.UpdateUserGroupsRequest:
    properties:
      groups:
        type: string
    required:
    - groups
    type: object
  common.UpdateUserRequest:
    properties:
      email:
        type: string
      groups:
        type: string
      password:
        type: string
      role:
        type: string
      username:
        type: string
    type: object
  common.User:
    properties:
      email:
        type: string
      groups:
        type: string
      id:
        type: integer
      inventories:
        type: string
      role:
        type: string
      username:
        type: string
    type: object
  common.UserResponse:
    properties:
      email:
        type: string
      groups:
        type: string
      inventories:
        type: string
      role:
        type: string
      username:
        type: string
    type: object
  github_com_monobilisim_monokit_common_api.Host:
    properties:
      cpuCores:
        type: integer
      createdAt:
        type: string
      disabledComponents:
        type: string
      groups:
        type: string
      id:
        type: integer
      installedComponents:
        type: string
      inventory:
        type: string
      ipAddress:
        type: string
      monokitVersion:
        type: string
      name:
        type: string
      os:
        type: string
      ram:
        type: string
      status:
        type: string
      upForDeletion:
        type: boolean
      updatedAt:
        type: string
      wantsUpdateTo:
        type: string
    type: object
  github_com_monobilisim_monokit_common_api.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  github_com_monobilisim_monokit_common_api.LoginResponse:
    properties:
      token:
        type: string
      user:
        properties:
          email:
            type: string
          groups:
            type: string
          role:
            type: string
          username:
            type: string
        type: object
    type: object
host: localhost:9989
info:
  contact:
    name: API Support
    url: https://mono.tr
  description: API Server for Monokit monitoring and management system
  license:
    name: GPLv3
    url: https://www.gnu.org/licenses/gpl-3.0.en.html
  termsOfService: http://swagger.io/terms/
  title: Monokit API
  version: "1.0"
paths:
  /admin/groups:
    get:
      consumes:
      - application/json
      description: Get list of all groups
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/common.Group'
            type: array
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: List all groups
      tags:
      - admin
    post:
      consumes:
      - application/json
      description: Create a new group
      parameters:
      - description: Group information
        in: body
        name: group
        required: true
        schema:
          $ref: '#/definitions/common.CreateGroupRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.Group'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/common.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create new group
      tags:
      - admin
  /admin/groups/{name}:
    delete:
      consumes:
      - application/json
      description: Delete an existing group and optionally its hosts
      parameters:
      - description: Group name
        in: path
        name: name
        required: true
        type: string
      - description: Delete associated hosts
        in: query
        name: withHosts
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/common.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete a group
      tags:
      - admin
  /admin/groups/{name}/hosts/{hostname}:
    delete:
      consumes:
      - application/json
      description: Remove a host from a group
      parameters:
      - description: Group name
        in: path
        name: name
        required: true
        type: string
      - description: Host name
        in: path
        name: hostname
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/common.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Remove host from group
      tags:
      - admin
    post:
      consumes:
      - application/json
      description: Add a host to a group
      parameters:
      - description: Group name
        in: path
        name: name
        required: true
        type: string
      - description: Host name
        in: path
        name: hostname
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/common.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Add host to group
      tags:
      - admin
  /admin/hosts/{hostname}:
    delete:
      consumes:
      - application/json
      description: Mark a host for deletion (admin only)
      parameters:
      - description: Host name
        in: path
        name: hostname
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/common.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Schedule host for deletion
      tags:
      - admin
  /admin/hosts/{hostname}/move/{inventory}:
    post:
      consumes:
      - application/json
      description: Move a host to a different inventory (admin only)
      parameters:
      - description: Host name
        in: path
        name: hostname
        required: true
        type: string
      - description: Target inventory name
        in: path
        name: inventory
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/common.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Move host to inventory
      tags:
      - admin
  /admin/users:
    get:
      consumes:
      - application/json
      description: Get list of all users (admin only)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/common.UserResponse'
            type: array
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get all users
      tags:
      - admin
    post:
      consumes:
      - application/json
      description: Create a new user (admin only)
      parameters:
      - description: User registration info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/common.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/common.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create new user
      tags:
      - admin
  /admin/users/{username}:
    delete:
      consumes:
      - application/json
      description: Delete a user (cannot delete own account)
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/common.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete user
      tags:
      - admin
    get:
      consumes:
      - application/json
      description: Get specific user information (admin only)
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.UserResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/common.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get user by username
      tags:
      - admin
    put:
      consumes:
      - application/json
      description: Update any user's details (admin only)
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      - description: User details to update
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/common.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/common.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update user details
      tags:
      - admin
  /admin/users/{username}/groups:
    put:
      consumes:
      - application/json
      description: Update user's group memberships
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      - description: Groups to assign
        in: body
        name: groups
        required: true
        schema:
          $ref: '#/definitions/common.UpdateUserGroupsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update user groups
      tags:
      - admin
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and get token
      parameters:
      - description: Login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/github_com_monobilisim_monokit_common_api.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_monobilisim_monokit_common_api.LoginResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      summary: Login user
      tags:
      - auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Invalidate user token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Logout user
      tags:
      - auth
  /auth/me:
    delete:
      consumes:
      - application/json
      description: Delete your own user account
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete own account
      tags:
      - auth
    get:
      consumes:
      - application/json
      description: Get details of the currently authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.UserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get current user
      tags:
      - auth
    put:
      consumes:
      - application/json
      description: Update your own username, password, or email
      parameters:
      - description: User details to update
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/common.UpdateMeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update own user details
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user (admin only)
      parameters:
      - description: User registration info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/common.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/common.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Register user
      tags:
      - auth
  /health/tools:
    get:
      description: Retrieves a combined list of names of all registered health check
        providers and tools found in submitted health data.
      produces:
      - application/json
      responses:
        "200":
          description: List of health tool names
          schema:
            items:
              type: string
            type: array
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get available health tools
      tags:
      - Health
  /host/health/{tool}:
    post:
      consumes:
      - application/json
      description: Allows a host agent to POST its health data for a specific tool.
      parameters:
      - description: Name of the health tool (e.g., osHealth)
        in: path
        name: tool
        required: true
        type: string
      - description: JSON health data from the tool
        in: body
        name: healthData
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: Data received and stored
          schema: {}
        "400":
          description: Invalid JSON data or missing tool name
          schema:
            $ref: '#/definitions/common.ErrorResponse'
        "401":
          description: Unauthorized (invalid host token)
          schema:
            $ref: '#/definitions/common.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Submit health data from a host agent
      tags:
      - Health
  /host/logs:
    post:
      consumes:
      - application/json
      description: Submit a log entry from a host
      parameters:
      - description: Log entry
        in: body
        name: log
        required: true
        schema:
          $ref: '#/definitions/common.APILogRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Log entry saved response
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request error
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized error
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Submit host log
      tags:
      - logs
  /hosts/{name}/{service}:
    get:
      consumes:
      - application/json
      description: Get the status of a component on a host
      parameters:
      - description: Host name
        in: path
        name: name
        required: true
        type: string
      - description: Service name
        in: path
        name: service
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Get component status
      tags:
      - hosts
  /hosts/{name}/awx-job-templates:
    get:
      consumes:
      - application/json
      description: Get available job templates from AWX for a specific host
      parameters:
      - description: Host name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of job templates
          schema:
            items:
              additionalProperties: true
              type: object
            type: array
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Host not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Get AWX job templates
      tags:
      - hosts
  /hosts/{name}/awx-job-templates/{templateID}:
    get:
      consumes:
      - application/json
      description: Get details of a specific job template from AWX including variables
      parameters:
      - description: Host name
        in: path
        name: name
        required: true
        type: string
      - description: Template ID
        in: path
        name: templateID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Job template details
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Host or template not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Get AWX job template details
      tags:
      - hosts
  /hosts/{name}/awx-jobs:
    get:
      consumes:
      - application/json
      description: Get AWX jobs for a specific host by name
      parameters:
      - description: Host name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              additionalProperties: true
              type: object
            type: array
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Host not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Get AWX jobs for a host
      tags:
      - hosts
  /hosts/{name}/awx-jobs/{jobID}/logs:
    get:
      consumes:
      - application/json
      description: Get logs for a specific AWX job of a host
      parameters:
      - description: Host name
        in: path
        name: name
        required: true
        type: string
      - description: AWX Job ID
        in: path
        name: jobID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Host or job not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Get logs for a specific AWX job
      tags:
      - hosts
  /hosts/{name}/disable/{service}:
    post:
      consumes:
      - application/json
      description: Disable a component on a host
      parameters:
      - description: Host name
        in: path
        name: name
        required: true
        type: string
      - description: Service name
        in: path
        name: service
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Disable component
      tags:
      - hosts
  /hosts/{name}/enable/{service}:
    post:
      consumes:
      - application/json
      description: Enable a component on a host
      parameters:
      - description: Host name
        in: path
        name: name
        required: true
        type: string
      - description: Service name
        in: path
        name: service
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Enable component
      tags:
      - hosts
  /hosts/{name}/health:
    get:
      description: |-
        Retrieves health data from the database for a given hostname.
        For the Monokit server itself, if data is not found in the database, it may attempt to collect it directly from local providers.
      parameters:
      - description: Hostname
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Aggregated health data
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Host not found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get aggregated health data for a host
      tags:
      - Health
  /hosts/{name}/health/{tool}:
    get:
      description: Retrieves health data from a specific registered provider for a
        given hostname and tool name.
      parameters:
      - description: Hostname
        in: path
        name: name
        required: true
        type: string
      - description: Health tool name
        in: path
        name: tool
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Health data for the specified tool
          schema: {}
        "404":
          description: Host not found or Tool not found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get specific tool health data for a host
      tags:
      - Health
  /hosts/{name}/updateTo/{version}:
    post:
      consumes:
      - application/json
      description: Set the version that a host should update to
      parameters:
      - description: Host name
        in: path
        name: name
        required: true
        type: string
      - description: Version to update to
        in: path
        name: version
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Update host version
      tags:
      - hosts
  /logs:
    get:
      consumes:
      - application/json
      description: Retrieve all logs with pagination
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Page size (default: 100, max: 1000)'
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Paginated logs response
          schema:
            $ref: '#/definitions/common.APILogsResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/common.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get all logs
      tags:
      - Logs
  /logs/{hostname}:
    get:
      consumes:
      - application/json
      description: Retrieve logs for a specific host with pagination
      parameters:
      - description: Hostname
        in: path
        name: hostname
        required: true
        type: string
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Page size (default: 100, max: 1000)'
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Paginated host logs response
          schema:
            $ref: '#/definitions/common.APIHostLogsResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/common.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get logs for a specific host
      tags:
      - Logs
  /logs/search:
    post:
      consumes:
      - application/json
      description: Search logs with various filters
      parameters:
      - description: Search parameters
        in: body
        name: search
        required: true
        schema:
          $ref: '#/definitions/common.APILogSearchRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Paginated logs response
          schema:
            $ref: '#/definitions/common.APILogsResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/common.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/common.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Search logs
      tags:
      - Logs
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
  KeycloakAuth:
    authorizationUrl: https://keycloak.example.com/auth/realms/your-realm/protocol/openid-connect/auth
    flow: implicit
    type: oauth2
swagger: "2.0"
tags:
- description: Host management operations
  name: hosts
- description: Authentication operations
  name: auth
- description: Admin operations
  name: admin
- description: Log management operations
  name: logs
